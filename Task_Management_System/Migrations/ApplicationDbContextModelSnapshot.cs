// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Task_Management_System.Data;

#nullable disable

namespace Project.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project.API.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(144)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Owner_Id")
                        .HasColumnType("int");

                    b.Property<string>("Privacy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Owner_Id");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("Project.API.Entities.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(144)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Owner_Id")
                        .HasColumnType("int");

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Owner_Id");

                    b.HasIndex("Project_Id");

                    b.ToTable("Todos", (string)null);
                });

            modelBuilder.Entity("Project.API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(144)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(144)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Project.API.Entities.UserProjects", b =>
                {
                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_Id", "Project_Id");

                    b.HasIndex("Project_Id");

                    b.ToTable("UserProjects", (string)null);
                });

            modelBuilder.Entity("Project.API.Entities.UserTodos", b =>
                {
                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<int>("Todo_Id")
                        .HasColumnType("int");

                    b.HasKey("User_Id", "Todo_Id");

                    b.HasIndex("Todo_Id");

                    b.ToTable("UserTodos", (string)null);
                });

            modelBuilder.Entity("Project.API.Entities.Project", b =>
                {
                    b.HasOne("Project.API.Entities.User", "Owner")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("Owner_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Project.API.Entities.Todo", b =>
                {
                    b.HasOne("Project.API.Entities.User", "Owner")
                        .WithMany("OwnedTodos")
                        .HasForeignKey("Owner_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Project.API.Entities.Project", "Project")
                        .WithMany("Todos")
                        .HasForeignKey("Project_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Project.API.Entities.UserProjects", b =>
                {
                    b.HasOne("Project.API.Entities.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("Project_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.API.Entities.User", "User")
                        .WithMany("JoinedProjects")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project.API.Entities.UserTodos", b =>
                {
                    b.HasOne("Project.API.Entities.Todo", "Todo")
                        .WithMany("AssignedUsers")
                        .HasForeignKey("Todo_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Project.API.Entities.User", "User")
                        .WithMany("AssignedTodos")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Todo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project.API.Entities.Project", b =>
                {
                    b.Navigation("Todos");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Project.API.Entities.Todo", b =>
                {
                    b.Navigation("AssignedUsers");
                });

            modelBuilder.Entity("Project.API.Entities.User", b =>
                {
                    b.Navigation("AssignedTodos");

                    b.Navigation("JoinedProjects");

                    b.Navigation("OwnedProjects");

                    b.Navigation("OwnedTodos");
                });
#pragma warning restore 612, 618
        }
    }
}
